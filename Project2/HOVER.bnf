<program> ::= START <stmt_list> END
<stmt_list> ::= <stmt> | <stmt> <stmt_list>
<stmt> ::= <if_stmt>; | <non_if_stmt>; | COMMENT
<non_if_stmt> ::= <declare_assign_stmts> | <constant_expr> | <loop> | <function_declare>  | <IO_stmt>
<declare_assign_stmts> ::= <declare_stmts> | <assign_stmt> 
<declare_stmts> ::= <declare> | <declare_assign>
<assign_stmt> ::= <assign> 
<declare> ::= <single_declare>
<single_declare> ::= <type> IDENTIFIER
<assign> ::= IDENTIFIER <assignment_op><constant_expr>
<declare_assign> ::=  <constant_declare_assign> | <single_declare> = <constant_expr> 
<loop> ::= <for_loop> | <while_loop> | <dowhile_loop> | <times_loop>
<func_call> ::= IDENTIFIER(<arguments>) | IDENTIFIER()
<arguments> ::= <arg> | <arg>,<arguments>
<arg> ::= <literal> | IDENTIFIER
<function_declare> ::= <non_void_funtion_declare> | <void_function_declare>
<IO_stmt> ::= <input_stmt> | <output_stmt>
<primitive_func> ::= GET_INC | GET_ALT | GET_TEMP | GET_ACC | GET_TIME | CONNECT_BASE | GET_CAPACITY | GET_BATTERY | CAM_ON | CAM_OFF | SNAP_PIC | WAIT IDENTIFIER | WAIT <positive_int>
<type> ::= INT | BOL | CHR | STR | FLT
<literal> ::= <integer> | FLOAT | CHAR | STRING | BOOLEAN | VOID
<integer> ::= <positive_int> | <negative_int>
<positive_int> ::= +INTEGER | INTEGER
<negative_int> ::= -INTEGER
<constant_declare_assign> ::= CONSTANT <type> IDENTIFIER = <literal> 
<constant_expr> ::= <logical_or_expr> | <range_expr>
<logical_or_expr> ::= <logical_and_expr> | <logical_or_expr> OR <logical_and_expr>
<logical_and_expr> ::= <equality_expr> | <logical_and_expr> AND <equality_expr>
<equality_expr> ::= <relational_expr> | <equality_expr> <equality_op> <relational_expr>
<relational_expr> ::= <arithmetic_add_expr> | <relational_expr> <relational_op> <arithmetic_add_expr>
<arithmetic_add_expr> ::= <arithmetic_mult_expr> | <arithmetic_add_expr> + <arithmetic_mult_expr> | <arithmetic_add_expr> - <arithmetic_mult_expr>
<arithmetic_mult_expr> ::= <arithmetic_pow_expr> | <arithmetic_mult_expr> * <arithemetic_pow_expr> | <arithmetic_mult_expr / <arithmetic_pow_expr>
<arithmetic_pow_expr> ::= <update_expr> | <arithmetic_pow_expr> ** <update_expr> | <arithmetic_pow_expr> % <update_expr>
<update_expr> ::= <primary_expr> | <update_expr>++ | <update_expr>--
<primary_expr> ::= IDENTIFIER | <literal> | <func_call> | <primitive_func> | (<expr>)
<expr> ::= <logical_or_expr>
<range_expr> ::= IDENTIFIER<range_keyword><range_bound>,<range_bound> | <literal><range_keyword><range_bound>,<range_bound>
<range_bound> ::= FLOAT | <integer> | IDENTIFIER
<range_keyword> ::= WITHIN | OUTSIDE
<if_stmt> ::= <matched> | <unmatched>
<matched> ::= IF (<constant_expr>) <matched> ELSE <matched> | {<if_stmt_list>}
<unmatched> ::= IF (<constant_expr>) <if_stmt> | IF (<constant_expr>) <matched> ELSE <unmatched>
<if_stmt_list> ::= <stmt_list> | <stmt_list> <return_stmt>;
<for_loop> ::= FOR (<for_init>;<for_condition>;<for_update>) {<stmt_list>}
<for_init> ::=   <declare_assign_stmts> | <for_init>, <declare_assign_stmts> 
<for_condition> ::= <constant_expr>
<for_update> ::= <assign_stmt> | <expr>
<while_loop> ::= WHILE (<constant_expr>){<stmt_list>}
<times_loop> ::= TIMES (<positive_int>) {<stmt_list>} | TIMES (IDENTIFIER) {<stmt_list>}
<dowhile_loop> ::= DO {<stmt_list>} WHILE (<constant_expr>)
<non_void_function_declare> ::= <type> FUNC IDENTIFIER(<parameters>){<stmt_list><return_stmt>;} | <type> FUNC IDENTIFIER(){<stmt_list><return_stmt>;} 
<void_function_declare> ::= VOID FUNC IDENTIFIER(<parameters>){<stmt_list>} | VOID FUNC IDENTIFIER(){<stmt_list>}
<parameters> ::= <parameter> | <parameter>,<parameters>
<parameter> ::= <single_declare>
<return_stmt> ::= RETURN <single_return> 
<single_return> ::= <constant_expr> 
<input_stmt> ::= <single_input> 
<single_input> ::= READ (STRING) INTO IDENTIFIER | READ INTO IDENTIFIER
<output_stmt> ::= WRITE (<constant_expr>) INTO (STRING) | WRITE (<constant_expr>)